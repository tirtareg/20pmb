<<<<<<< HEAD
# calculate performance
prediction$confusion
prediction$data
prediction$data$row_ids
prediction$data$response
measure <- msr("classif.acc")
measure
?msr
measure <- msr("classif.acc")
prediction$score(measure)
# load learner and set hyperparameter
learner <- lrn("classif.rpart", cp = 0.01)
learner
# train/test split
train_set <- sample(task_iris$nrow, 0.8 * task_iris$nrow)
test_set <- setdiff(seq_len(task_iris$nrow), train_set)
# train the model
learner$train(task_iris, row_ids = train_set)
# predict data
prediction <- learner$predict(task_iris, row_ids = test_set)
# calculate performance
prediction$confusion
measure <- msr("classif.acc")
prediction$score(measure)
measure <- msr("classif.auc")
prediction$score(measure)
prediction$score()
measure <- msr("classif.acc")
prediction$score(measure)
# automatic resampling
resampling <- rsmp("cv", folds = 3L)
resampling
# automatic resampling
resampling <- rsmp("cv", folds = 5L)
rr <- resample(task_iris, learner, resampling)
rr$score(measure)
rr$aggregate(measure)
knitr::opts_chunk$set(echo = TRUE)
library(mlr3)
# create learning task
task_iris <- TaskClassif$new(id = "iris", backend = iris, target = "Species")
task_iris
# load learner and set hyperparameter
learner <- lrn("classif.rpart", cp = 0.01)
learner
# train/test split
train_set <- sample(task_iris$nrow, 0.8 * task_iris$nrow)
test_set <- setdiff(seq_len(task_iris$nrow), train_set)
# train the model
learner$train(task_iris, row_ids = train_set)
# predict data
prediction <- learner$predict(task_iris, row_ids = test_set)
# calculate performance
prediction$confusion
measure <- msr("classif.acc")
prediction$score(measure)
# automatic resampling
resampling <- rsmp("cv", folds = 5L)
rr <- resample(task_iris, learner, resampling)
rr$score(measure)
rr$aggregate(measure)
knitr::opts_chunk$set(echo = TRUE)
library(mlr3)
# create learning task
task_iris <- TaskClassif$new(id = "iris", backend = iris, target = "Species")
task_iris
# load learner and set hyperparameter
learner <- lrn("classif.rpart", cp = 0.01)
learner
# train/test split
train_set <- sample(task_iris$nrow, 0.8 * task_iris$nrow)
test_set <- setdiff(seq_len(task_iris$nrow), train_set)
# train the model
learner$train(task_iris, row_ids = train_set)
# predict data
prediction <- learner$predict(task_iris, row_ids = test_set)
# calculate performance
prediction$confusion
measure <- msr("classif.acc")
prediction$score(measure)
# automatic resampling
resampling <- rsmp("cv", folds = 5L)
rr <- resample(task_iris, learner, resampling)
rr$score(measure)
rr$aggregate(measure)
knitr::opts_chunk$set(echo = TRUE)
library(mlr3)
# create learning task
task_iris <- TaskClassif$new(id = "iris", backend = iris, target = "Species")
task_iris
# load learner and set hyperparameter
learner <- lrn("classif.rpart", cp = 0.01)
learner
# train/test split
train_set <- sample(task_iris$nrow, 0.8 * task_iris$nrow)
test_set <- setdiff(seq_len(task_iris$nrow), train_set)
# train the model
learner$train(task_iris, row_ids = train_set)
# predict data
prediction <- learner$predict(task_iris, row_ids = test_set)
# calculate performance
prediction$confusion
measure <- msr("classif.acc")
prediction$score(measure)
# automatic resampling
resampling <- rsmp("cv", folds = 5L)
rr <- resample(task_iris, learner, resampling)
rr$score(measure)
rr$aggregate(measure)
knitr::opts_chunk$set(echo = TRUE)
library(mlr3)
# create learning task
task_iris <- TaskClassif$new(id = "iris", backend = iris, target = "Species")
task_iris
# load learner and set hyperparameter
learner <- lrn("classif.rpart", cp = 0.01)
learner
# train/test split
train_set <- sample(task_iris$nrow, 0.8 * task_iris$nrow)
test_set <- setdiff(seq_len(task_iris$nrow), train_set)
# train the model
learner$train(task_iris, row_ids = train_set)
# predict data
prediction <- learner$predict(task_iris, row_ids = test_set)
# calculate performance
prediction$confusion
measure <- msr("classif.acc")
prediction$score(measure)
# automatic resampling
resampling <- rsmp("cv", folds = 5L)
rr <- resample(task_iris, learner, resampling)
rr$score(measure)
rr$aggregate(measure)
knitr::opts_chunk$set(echo = TRUE)
library(mlr3)
# create learning task
task_iris <- TaskClassif$new(id = "iris", backend = iris, target = "Species")
task_iris
# load learner and set hyperparameter
learner <- lrn("classif.rpart", cp = 0.01)
learner
# train/test split
train_set <- sample(task_iris$nrow, 0.8 * task_iris$nrow)
test_set <- setdiff(seq_len(task_iris$nrow), train_set)
# train the model
learner$train(task_iris, row_ids = train_set)
# predict data
prediction <- learner$predict(task_iris, row_ids = test_set)
# calculate performance
prediction$confusion
measure <- msr("classif.acc")
prediction$score(measure)
# automatic resampling
resampling <- rsmp("cv", folds = 5L)
rr <- resample(task_iris, learner, resampling)
rr$score(measure)
rr$aggregate(measure)
knitr::opts_chunk$set(echo = TRUE)
library(mlr3)
# create learning task
task_iris <- TaskClassif$new(id = "iris", backend = iris, target = "Species")
task_iris
# load learner and set hyperparameter
learner <- lrn("classif.rpart", cp = 0.01)
learner
# train/test split
set.seed(100)
train_set <- sample(task_iris$nrow, 0.8 * task_iris$nrow)
test_set <- setdiff(seq_len(task_iris$nrow), train_set)
# train the model
learner$train(task_iris, row_ids = train_set)
# predict data
prediction <- learner$predict(task_iris, row_ids = test_set)
# calculate performance
prediction$confusion
measure <- msr("classif.acc")
prediction$score(measure)
# automatic resampling
resampling <- rsmp("cv", folds = 5L)
rr <- resample(task_iris, learner, resampling)
rr$score(measure)
rr$aggregate(measure)
knitr::opts_chunk$set(echo = TRUE)
library(mlr3)
# create learning task
task_iris <- TaskClassif$new(id = "iris", backend = iris, target = "Species")
task_iris
# load learner and set hyperparameter
learner <- lrn("classif.rpart", cp = 0.01)
learner
# train/test split
set.seed(100)
train_set <- sample(task_iris$nrow, 0.8 * task_iris$nrow)
test_set <- setdiff(seq_len(task_iris$nrow), train_set)
# train the model
learner$train(task_iris, row_ids = train_set)
# predict data
prediction <- learner$predict(task_iris, row_ids = test_set)
# calculate performance
prediction$confusion
measure <- msr("classif.acc")
prediction$score(measure)
# automatic resampling
resampling <- rsmp("cv", folds = 5L)
rr <- resample(task_iris, learner, resampling)
rr$score(measure)
rr$aggregate(measure)
knitr::opts_chunk$set(echo = TRUE)
library(mlr3)
# create learning task
task_iris <- TaskClassif$new(id = "iris", backend = iris, target = "Species")
task_iris
# load learner and set hyperparameter
learner <- lrn("classif.rpart", cp = 0.01)
learner
# train/test split
set.seed(100)
train_set <- sample(task_iris$nrow, 0.8 * task_iris$nrow)
test_set <- setdiff(seq_len(task_iris$nrow), train_set)
# train the model
learner$train(task_iris, row_ids = train_set)
# predict data
prediction <- learner$predict(task_iris, row_ids = test_set)
# calculate performance
prediction$confusion
measure <- msr("classif.acc")
prediction$score(measure)
# automatic resampling
resampling <- rsmp("cv", folds = 5L)
rr <- resample(task_iris, learner, resampling)
rr$score(measure)
rr$aggregate(measure)
knitr::opts_chunk$set(echo = TRUE)
library(mlr3)
# create learning task
task_iris <- TaskClassif$new(id = "iris", backend = iris, target = "Species")
task_iris
# load learner and set hyperparameter
learner <- lrn("classif.rpart", cp = 0.01)
learner
# train/test split
set.seed(100)
train_set <- sample(task_iris$nrow, 0.8 * task_iris$nrow)
test_set <- setdiff(seq_len(task_iris$nrow), train_set)
# train the model
learner$train(task_iris, row_ids = train_set)
# predict data
prediction <- learner$predict(task_iris, row_ids = test_set)
# calculate performance
prediction$confusion
measure <- msr("classif.acc")
prediction$score(measure)
# automatic resampling
resampling <- rsmp("cv", folds = 5L)
rr <- resample(task_iris, learner, resampling)
rr$score(measure)
rr$aggregate(measure)
knitr::opts_chunk$set(echo = TRUE)
library(mlr3)
# create learning task
task_iris <- TaskClassif$new(id = "iris", backend = iris, target = "Species")
task_iris
# load learner and set hyperparameter
learner <- lrn("classif.rpart", cp = 0.01)
learner
# train/test split
set.seed(100)
train_set <- sample(task_iris$nrow, 0.8 * task_iris$nrow)
test_set <- setdiff(seq_len(task_iris$nrow), train_set)
# train the model
learner$train(task_iris, row_ids = train_set)
# predict data
prediction <- learner$predict(task_iris, row_ids = test_set)
# calculate performance
prediction$confusion
measure <- msr("classif.acc")
prediction$score(measure)
# automatic resampling
resampling <- rsmp("cv", folds = 5L)
rr <- resample(task_iris, learner, resampling)
rr$score(measure)
rr$aggregate(measure)
knitr::opts_chunk$set(echo = TRUE)
library(mlr3)
# create learning task
task_iris <- TaskClassif$new(id = "iris", backend = iris, target = "Species")
task_iris
# load learner and set hyperparameter
learner <- lrn("classif.rpart", cp = 0.01)
learner
# train/test split
set.seed(100)
train_set <- sample(task_iris$nrow, 0.8 * task_iris$nrow)
test_set <- setdiff(seq_len(task_iris$nrow), train_set)
# train the model
learner$train(task_iris, row_ids = train_set)
# predict data
prediction <- learner$predict(task_iris, row_ids = test_set)
# calculate performance
prediction$confusion
measure <- msr("classif.acc")
prediction$score(measure)
# automatic resampling
resampling <- rsmp("cv", folds = 5L)
rr <- resample(task_iris, learner, resampling)
rr$score(measure)
rr$aggregate(measure)
knitr::opts_chunk$set(echo = TRUE)
library(mlr3)
# create learning task
task_iris <- TaskClassif$new(id = "iris", backend = iris, target = "Species")
task_iris
# load learner and set hyperparameter
learner <- lrn("classif.rpart", cp = 0.01)
learner
# train/test split
set.seed(100)
train_set <- sample(task_iris$nrow, 0.8 * task_iris$nrow)
test_set <- setdiff(seq_len(task_iris$nrow), train_set)
# train the model
learner$train(task_iris, row_ids = train_set)
# predict data
prediction <- learner$predict(task_iris, row_ids = test_set)
# calculate performance
prediction$confusion
measure <- msr("classif.acc")
prediction$score(measure)
# automatic resampling
resampling <- rsmp("cv", folds = 5L)
rr <- resample(task_iris, learner, resampling)
rr$score(measure)
rr$aggregate(measure)
knitr::opts_chunk$set(echo = TRUE)
library(mlr3)
# create learning task
task_iris <- TaskClassif$new(id = "iris", backend = iris, target = "Species")
task_iris
# load learner and set hyperparameter
learner <- lrn("classif.rpart", cp = 0.01)
learner
# train/test split
set.seed(100)
train_set <- sample(task_iris$nrow, 0.8 * task_iris$nrow)
test_set <- setdiff(seq_len(task_iris$nrow), train_set)
# train the model
learner$train(task_iris, row_ids = train_set)
# predict data
prediction <- learner$predict(task_iris, row_ids = test_set)
# calculate performance
prediction$confusion
measure <- msr("classif.acc")
prediction$score(measure)
# automatic resampling
resampling <- rsmp("cv", folds = 5L)
rr <- resample(task_iris, learner, resampling)
rr$score(measure)
rr$aggregate(measure)
knitr::opts_chunk$set(echo = TRUE)
library(mlr3)
# create learning task
task_iris <- TaskClassif$new(id = "iris", backend = iris, target = "Species")
task_iris
# load learner and set hyperparameter
learner <- lrn("classif.rpart", cp = 0.01)
learner
# train/test split
set.seed(100)
train_set <- sample(task_iris$nrow, 0.8 * task_iris$nrow)
test_set <- setdiff(seq_len(task_iris$nrow), train_set)
# train the model
learner$train(task_iris, row_ids = train_set)
# predict data
prediction <- learner$predict(task_iris, row_ids = test_set)
# calculate performance
prediction$confusion
measure <- msr("classif.acc")
prediction$score(measure)
# automatic resampling
resampling <- rsmp("cv", folds = 5L)
rr <- resample(task_iris, learner, resampling)
rr$score(measure)
rr$aggregate(measure)
knitr::opts_chunk$set(echo = TRUE)
library(mlr3)
# create learning task
task_iris <- TaskClassif$new(id = "iris", backend = iris, target = "Species")
task_iris
# load learner and set hyperparameter
learner <- lrn("classif.rpart", cp = 0.01)
learner
# train/test split
set.seed(100)
train_set <- sample(task_iris$nrow, 0.8 * task_iris$nrow)
test_set <- setdiff(seq_len(task_iris$nrow), train_set)
# train the model
learner$train(task_iris, row_ids = train_set)
# predict data
prediction <- learner$predict(task_iris, row_ids = test_set)
# calculate performance
prediction$confusion
measure <- msr("classif.acc")
prediction$score(measure)
# automatic resampling
resampling <- rsmp("cv", folds = 5L)
rr <- resample(task_iris, learner, resampling)
rr$score(measure)
rr$aggregate(measure)
data("mtcars", package = "datasets")
data = mtcars[, 1:3]
str(data)
library("mlr3")
task_mtcars = TaskRegr$new(id = "cars", backend = data, target = "mpg")
print(task_mtcars)
task_mtcars
library("mlr3viz")
install.packages('mlr3viz', dependencies = T)
library("mlr3viz")
install.packages('vctrs', dependencies = T)
library("mlr3viz")
autoplot(task_mtcars, type = "pairs")
autoplot(task_mtcars, type = "pairs")
a <- autoplot(task_mtcars, type = "pairs")
ggsave(a)
ggplot2::ggsave(a)
rlang::last_error()
library(Cairo)
install.packages('Cairo')
library(Cairo)
Cairo::Cairo(
30, #length
30, #width
file = paste("nameofplot", ".png", sep = ""),
type = "png", #tiff
bg = "transparent", #white or transparent depending on your requirement
dpi = 300,
units = "cm" #you can change to pixels etc
)
plot(a) #p is your graph object
tinytex::install_tinytex()
mlr_tasks
mlr_tasks$get('pima')
print(mlr_tasks$get('pima'))
mlr_tasks$get('pima')$data()
mlr_tasks$get('iris')$data()
class(mlr_tasks$get('iris')$data())
mlr_tasks
as.data.table(mlr_tasks)
task_mtcars$missings()
task_mtcars$missings()
task_mtcars$man
task_mtcars$man()
task_mtcars$missings()
task_iris = mlr_tasks$get("iris")
print(task_iris)
tsk('iris')
tsk('iris')
tsk('iris')$data()
task_iris$data()
task_iris$data()
tsk('iris')$data()
task_iris$data()
dim(tsk('iris')$data())
str(tsk('iris')$data())
summary(task_iris)
summary(task_iris$data())
summary(tsk('iris'))
tsk('iris')
summary(tsk('iris')$data())
reticulate::repl_python()
print('nmaku')
Y
update.packages(ask = F, checkBuilt = T)
install.packages('rlang')
install.packages("rlang")
library(discretization)
install.packages("discretization")
library(discretization)
data(iris)
mdlp(iris)$Disc.data
a <- mdlp(iris)
a$cutp
a$cutp[1]
str(iris)
a
summary(a)
a
a <- mdlp(iris)
a
str(a)
a
class(a)
a
a$Disc.data
summary(a$Disc.data)
mdlp(iris)$cutp
mdlp(iris)$cutp[1]
a <- rnorm(130, 10, 2)
mdlp(a)$cutp
dim(iris)
iris
mdlp(iris[,c(1, 5)])
mdlp(iris[,c(1, 5)])$cutp
mdlp(iris[,c(1, 5)])$cutp[1]
c(-Inf, mdlp(iris[,c(1,5)$cutp[1]]), Inf)
c(-Inf, mdlp(iris[,c(1,5])$cutp[1]]), Inf)
c(-Inf, mdlp(iris[,c(1,5])$cutp[1]), Inf)
c(-Inf, mdlp(iris[,c(1,5)])$cutp[1]), Inf)
c(-Inf, mdlp(iris[,c(1,5)])$cutp[1], Inf)
mdlp(iris[,c(1,5)])$cutp[[1]]
c(-Inf, mdlp(iris[,c(1,5)])$cutp[[1]], Inf)
setwd("G:/My Drive/#PMB/2020/Dashboard/20pmb")
install.packages(c("data.table", "future.apply", "parallelly", "robustbase"))
=======
belum = lulus - sudah,
diterima = sum(na.omit(nim == "diterima")))
data
data <- data %>%
group_by(fakultas, jenjang, prodi) %>%
summarize(pendaftar = sum(pendaftar),
lulus = sum(lulus),
sudah = sum(sudah),
belum = sum(belum),
diterima = sum(diterima))
View(data)
data <- db %>%
group_by(fakultas, prodi, jalur, jenjang) %>%
filter(!is.na(prodi)) %>%
summarize(peminat = max(peminat),
lulus = n(),
sudah = sum(na.omit(registrasi == "registrasi")),
belum = lulus - sudah,
diterima = sum(na.omit(nim == "diterima")))
data
db
data <- db %>%
group_by(fakultas, prodi, jalur) %>%
filter(jalur, c("1_SNMPTN", "2_SBMPTN", "3_SMMPTN")) %>%
summarize(peminat = max(peminat),
lulus = n(),
sudah = sum(na.omit(registrasi == "registrasi")),
belum = lulus - sudah,
diterima = sum(na.omit(nim == "diterima")))
data <- db %>%
group_by(fakultas, prodi, jalur) %>%
filter(jalur %in% c("1_SNMPTN", "2_SBMPTN", "3_SMMPTN")) %>%
summarize(peminat = max(peminat),
lulus = n(),
sudah = sum(na.omit(registrasi == "registrasi")),
belum = lulus - sudah,
diterima = sum(na.omit(nim == "diterima")))
data
data1 <- db %>%
group_by(fakultas, prodi, jalur) %>%
filter(jalur %in% c("1_SNMPTN", "2_SBMPTN", "3_SMMPTN")) %>%
summarize(peminat = max(peminat),
lulus = n(),
sudah = sum(na.omit(registrasi == "registrasi")),
belum = lulus - sudah,
diterima = sum(na.omit(nim == "diterima")))
data2 <- db %>%
group_by(fakultas, prodi, jalur) %>%
filter(!jalur %in% c("1_SNMPTN", "2_SBMPTN", "3_SMMPTN")) %>%
summarize(peminat = max(peminat),
lulus = n(),
sudah = sum(na.omit(registrasi == "registrasi")),
belum = lulus - sudah,
diterima = sum(na.omit(nim == "diterima")))
data2
data2 <- db %>%
group_by(fakultas, prodi, jalur) %>%
filter(!jalur %in% c("1_SNMPTN", "2_SBMPTN", "3_SMMPTN")) %>%
summarize(peminat = max(peminat),
lulus = sum(na.omit(registrasi == "registrasi")),
sudah = sum(na.omit(registrasi == "registrasi")),
belum = lulus - sudah,
diterima = sum(na.omit(nim == "diterima")))
data2
data <- rbind(data1, data2)
data <- data %>%
group_by(fakultas) %>%
summarize(pendaftar = sum(peminat),
lulus = sum(lulus),
sudah = sum(sudah),
belum = sum(belum),
diterima = sum(diterima))
data
sum(data$diterima)
data$fakultas <- c("Hukum", "FKIP", "Teknik", "Pertanian",
"FEB", "FISIP", "Pascasarjana","Kedokteran")
data$fakultas  <- factor(data$fakultas, levels = data[["fakultas"]])
plot_ly(data, x = ~fakultas, y = ~lulus, type = "bar", name = "Total") %>%
add_trace(y = ~sudah, name = "registrasi berkas") %>%
add_trace(y = ~diterima, name = "bayar UKT") %>%
layout(
title = "",
yaxis = list(title = ""),
xaxis = list(title = "Fakultas"),
hovermode = "compare"
)
data <- adorn_totals(data, where = "row", name = "Total")
data$pers_sudah <- round(data$sudah / data$lulus * 100, 0)
data$pers_belum <- round(data$belum / data$lulus * 100, 0)
names(data)
data <- data[,c(1:5,7:8,6)]
names(data) <- c("Fakultas", "Pendaftar", "Lulus", "Ya", "Tidak", "Ya (%)", "Tidak (%)", "Bayar UKT")
kable(data) %>%
kable_styling(bootstrap_options = "striped", full_width = F,
latex_options = "scale_down") %>%
add_header_above(c(" " = 3, "Registrasi Berkas" = 4," " = 1))
data1 <- db %>%
group_by(fakultas, prodi, jalur) %>%
filter(jalur %in% c("1_SNMPTN", "2_SBMPTN", "3_SMMPTN"), !is.na(prodi)) %>%
summarize(peminat = max(peminat),
lulus = n(),
sudah = sum(na.omit(registrasi == "registrasi")),
belum = lulus - sudah,
diterima = sum(na.omit(nim == "diterima")))
data2 <- db %>%
group_by(fakultas, prodi, jalur) %>%
filter(!jalur %in% c("1_SNMPTN", "2_SBMPTN", "3_SMMPTN"), !is.na(prodi)) %>%
summarize(peminat = max(peminat),
lulus = sum(na.omit(registrasi == "registrasi")),
sudah = sum(na.omit(registrasi == "registrasi")),
belum = lulus - sudah,
diterima = sum(na.omit(nim == "diterima")))
data <- rbind(data1, data2)
data <- data %>%
group_by(fakultas) %>%
summarize(pendaftar = sum(peminat),
lulus = sum(lulus),
sudah = sum(sudah),
belum = sum(belum),
diterima = sum(diterima))
data
data$fakultas <- c("Hukum", "FKIP", "Teknik", "Pertanian",
"FEB", "FISIP", "Pascasarjana","Kedokteran")
data$fakultas  <- factor(data$fakultas, levels = data[["fakultas"]])
plot_ly(data, x = ~fakultas, y = ~lulus, type = "bar", name = "Total") %>%
add_trace(y = ~sudah, name = "registrasi berkas") %>%
add_trace(y = ~diterima, name = "bayar UKT") %>%
layout(
title = "",
yaxis = list(title = ""),
xaxis = list(title = "Fakultas"),
hovermode = "compare"
)
data <- adorn_totals(data, where = "row", name = "Total")
data$pers_sudah <- round(data$sudah / data$lulus * 100, 0)
data$pers_belum <- round(data$belum / data$lulus * 100, 0)
data <- data[,c(1:5,7:8,6)]
names(data) <- c("Fakultas", "Peminat", "Lulus", "Ya", "Tidak", "Ya (%)", "Tidak (%)", "Bayar UKT")
kable(data) %>%
kable_styling(bootstrap_options = "striped", full_width = F,
latex_options = "scale_down") %>%
add_header_above(c(" " = 3, "Registrasi Berkas" = 4," " = 1))
data1
data1 <- db %>%
group_by(fakultas, prodi, jalur) %>%
filter(jalur %in% c("1_SNMPTN", "2_SBMPTN", "3_SMMPTN"), !is.na(prodi)) %>%
summarize(peminat = max(peminat),
lulus = n(),
sudah = sum(na.omit(registrasi == "registrasi")),
belum = lulus - sudah,
diterima = sum(na.omit(nim == "diterima")))
data2 <- db %>%
group_by(fakultas, prodi, jalur) %>%
filter(!jalur %in% c("1_SNMPTN", "2_SBMPTN", "3_SMMPTN"), !is.na(prodi)) %>%
summarize(peminat = max(peminat),
lulus = sum(na.omit(registrasi == "registrasi")),
sudah = sum(na.omit(registrasi == "registrasi")),
belum = lulus - sudah,
diterima = sum(na.omit(nim == "diterima")))
data <- rbind(data1, data2)
data1 <- db %>%
group_by(fakultas, jenjang, prodi, jalur) %>%
filter(jalur %in% c("1_SNMPTN", "2_SBMPTN", "3_SMMPTN"), !is.na(prodi)) %>%
summarize(peminat = max(peminat),
lulus = n(),
sudah = sum(na.omit(registrasi == "registrasi")),
belum = lulus - sudah,
diterima = sum(na.omit(nim == "diterima")))
data2 <- db %>%
group_by(fakultas, jenjang, prodi, jalur) %>%
filter(!jalur %in% c("1_SNMPTN", "2_SBMPTN", "3_SMMPTN"), !is.na(prodi)) %>%
summarize(peminat = max(peminat),
lulus = sum(na.omit(registrasi == "registrasi")),
sudah = sum(na.omit(registrasi == "registrasi")),
belum = lulus - sudah,
diterima = sum(na.omit(nim == "diterima")))
data <- rbind(data1, data2)
View(data)
data1 <- db %>%
group_by(fakultas, jenjang, prodi, jalur) %>%
filter(jalur %in% c("1_SNMPTN", "2_SBMPTN", "3_SMMPTN"), !is.na(prodi)) %>%
summarize(peminat = max(peminat),
lulus = n(),
sudah = sum(na.omit(registrasi == "registrasi")),
belum = lulus - sudah,
diterima = sum(na.omit(nim == "diterima")))
data2 <- db %>%
group_by(fakultas, jenjang, prodi, jalur) %>%
filter(!jalur %in% c("1_SNMPTN", "2_SBMPTN", "3_SMMPTN"), !is.na(prodi)) %>%
summarize(peminat = max(peminat),
lulus = sum(na.omit(registrasi == "registrasi")),
sudah = sum(na.omit(registrasi == "registrasi")),
belum = lulus - sudah,
diterima = sum(na.omit(nim == "diterima")))
data <- rbind(data1, data2)
View(data)
data <- data %>%
group_by(fakultas, jenjang, prodi) %>%
summarize(peminat = sum(peminat),
lulus = sum(lulus),
sudah = sum(sudah),
belum = sum(belum),
diterima = sum(diterima))
data
View(data)
sum(data$peminat)
sum(data$diterima)
data1 <- db %>%
group_by(fakultas, jenjang, prodi, jalur) %>%
filter(jalur %in% c("1_SNMPTN", "2_SBMPTN", "3_SMMPTN"), !is.na(prodi)) %>%
summarize(peminat = max(peminat),
lulus = n(),
sudah = sum(na.omit(registrasi == "registrasi")),
belum = lulus - sudah,
diterima = sum(na.omit(nim == "diterima")))
data2 <- db %>%
group_by(fakultas, jenjang, prodi, jalur) %>%
filter(!jalur %in% c("1_SNMPTN", "2_SBMPTN", "3_SMMPTN"), !is.na(prodi)) %>%
summarize(peminat = max(peminat),
lulus = sum(na.omit(registrasi == "registrasi")),
sudah = sum(na.omit(registrasi == "registrasi")),
belum = lulus - sudah,
diterima = sum(na.omit(nim == "diterima")))
data <- rbind(data1, data2)
data <- data %>%
group_by(fakultas, jenjang, prodi) %>%
summarize(peminat = sum(peminat),
lulus = sum(lulus),
sudah = sum(sudah),
belum = sum(belum),
diterima = sum(diterima))
data <- data[, -1]
data1 <- db %>%
group_by(fakultas, jenjang, prodi, jalur) %>%
filter(jalur %in% c("1_SNMPTN", "2_SBMPTN", "3_SMMPTN"), !is.na(prodi)) %>%
summarize(peminat = max(peminat),
lulus = n(),
sudah = sum(na.omit(registrasi == "registrasi")),
belum = lulus - sudah,
diterima = sum(na.omit(nim == "diterima")))
data2 <- db %>%
group_by(fakultas, jenjang, prodi, jalur) %>%
filter(!jalur %in% c("1_SNMPTN", "2_SBMPTN", "3_SMMPTN"), !is.na(prodi)) %>%
summarize(peminat = max(peminat),
lulus = sum(na.omit(registrasi == "registrasi")),
sudah = sum(na.omit(registrasi == "registrasi")),
belum = lulus - sudah,
diterima = sum(na.omit(nim == "diterima")))
data <- rbind(data1, data2)
data <- data %>%
group_by(fakultas, jenjang, prodi) %>%
summarize(peminat = sum(peminat),
lulus = sum(lulus),
sudah = sum(sudah),
belum = sum(belum),
diterima = sum(diterima))
View(data)
db <- read_excel("G:/My Drive/#PMB/2021/Dashboard/maba21_4web.xlsx")
data1 <- db %>%
group_by(fakultas, jenjang, prodi, jalur) %>%
filter(jalur %in% c("1_SNMPTN", "2_SBMPTN", "3_SMMPTN"), !is.na(prodi)) %>%
summarize(peminat = max(peminat),
lulus = n(),
sudah = sum(na.omit(registrasi == "registrasi")),
belum = lulus - sudah,
diterima = sum(na.omit(nim == "diterima")))
db
db <- read_excel("G:/My Drive/#PMB/2021/Dashboard/maba21_4web.xlsx")
db
db <- read_excel("G:/My Drive/#PMB/2021/Dashboard/maba21_4web.xlsx")
data1 <- db %>%
group_by(fakultas, jenjang, prodi, jalur) %>%
filter(jalur %in% c("1_SNMPTN", "2_SBMPTN", "3_SMMPTN"), !is.na(prodi)) %>%
summarize(peminat = max(peminat),
lulus = n(),
sudah = sum(na.omit(registrasi == "registrasi")),
belum = lulus - sudah,
diterima = sum(na.omit(nim == "diterima")))
data2 <- db %>%
group_by(fakultas, jenjang, prodi, jalur) %>%
filter(!jalur %in% c("1_SNMPTN", "2_SBMPTN", "3_SMMPTN"), !is.na(prodi)) %>%
summarize(peminat = max(peminat),
lulus = sum(na.omit(registrasi == "registrasi")),
sudah = sum(na.omit(registrasi == "registrasi")),
belum = lulus - sudah,
diterima = sum(na.omit(nim == "diterima")))
data <- rbind(data1, data2)
data <- data %>%
group_by(fakultas, jenjang, prodi) %>%
summarize(peminat = sum(peminat),
lulus = sum(lulus),
sudah = sum(sudah),
belum = sum(belum),
diterima = sum(diterima))
View(data)
data <- data[, -1]
data
names(data)
data <- adorn_totals(data,where = "row", name = "Total")
data$pers_sudah <- round(data$sudah / data$lulus * 100, 0)
data$pers_belum <- round(data$belum / data$lulus * 100, 0)
names(data)
data <- data[,c(2, 1, 3:6, 8:9, 7)]
names(data) <- c("Fakultas/Program Studi", "Jenjang","Peminat", "Lulus", "Ya", "Tidak", "Ya (%)", "Tidak (%)", "Bayar UKT")
kable(data, row.names = F) %>%
kable_styling(bootstrap_options = "striped", full_width = F,
latex_options = "scale_down") %>%
add_header_above(c(" " = 3, "Registrasi" = 4, " " = 1)) %>%
pack_rows("Hukum", 1, 1, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Keguruan dan Ilmu Pendidikan", 2, 20, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Teknik", 20, 26, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Pertanian", 27, 30, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Ekonomi dan Bisnis", 31, 38, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Ilmu Sosial dan Ilmu Politik", 39, 41, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Pascasarjana", 42, 54, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Kedokteran", 55, 59, label_row_css = "background-color: #666; color: #fff;")
kable(data, row.names = F) %>%
kable_styling(bootstrap_options = "striped", full_width = F,
latex_options = "scale_down") %>%
add_header_above(c(" " = 4, "Registrasi" = 4, " " = 1)) %>%
pack_rows("Hukum", 1, 1, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Keguruan dan Ilmu Pendidikan", 2, 20, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Teknik", 20, 26, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Pertanian", 27, 30, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Ekonomi dan Bisnis", 31, 38, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Ilmu Sosial dan Ilmu Politik", 39, 41, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Pascasarjana", 42, 54, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Kedokteran", 55, 59, label_row_css = "background-color: #666; color: #fff;")
data <- db %>%
group_by(fakultas, jalur) %>%
filter(diterima = "diterima")
names(db)
data <- db %>%
group_by(fakultas, jalur) %>%
filter(nim = "diterima")
data <- db %>%
group_by(fakultas, jalur) %>%
filter(nim == "diterima")
nrow(data)
data <- db %>%
group_by(fakultas, jalur) %>%
filter(nim == "diterima") %>%
summarize(n =  n())
data
data <- db %>%
group_by(fakultas, jalur) %>%
filter(nim == "diterima") %>%
summarize(n =  n()) %>%
pivot_wider(names_from = jalur, values_from = n)
data
db %>%
group_by(fakultas, jalur) %>%
filter(nim == "diterima") %>%
summarize(n =  n())
View(data)
data[is.na(data)] <- 0
data
data <- adorn_totals(data, where = c("row", "column") , name = c("Total", "Total"))
data <- adorn_totals(data, where = c("row", "col") , name = c("Total", "Total"))
data
data <- db %>%
group_by(fakultas, jalur) %>%
filter(nim == "diterima") %>%
summarize(n =  n()) %>%
pivot_wider(names_from = jalur, values_from = n)
data[is.na(data)] <- 0
names(data) <- c("Fakultas", "SNMPTN", "SBMPTN", "SMMPTN", "ADIK", "UMM D3", "Alih Jenjang", "UM Pasca")
data <- adorn_totals(data, where = c("row", "col") , name = c("Total", "Total"))
data
data <- db %>%
group_by(fakultas, jalur) %>%
filter(nim == "diterima") %>%
summarize(n =  n()) %>%
pivot_wider(names_from = jalur, values_from = n)
data[is.na(data)] <- 0
names(data) <- c("Fakultas", "SNMPTN", "SBMPTN", "SMMPTN", "ADIK", "UMM D3", "Alih Jenjang", "UM Pasca")
data
data$Fakultas <- c("Hukum", "FKIP", "Teknik", "Pertanian", "FEB", "FISIP", "Pascasarjana", "Kedokteran")
data <- adorn_totals(data, where = c("row", "col") , name = c("Total", "Total"))
data
kable(data) %>%
kable_styling(bootstrap_options = "striped", full_width = F,
latex_options = "scale_down") %>%
add_header_above(c(" " = 1, "Jalur Masuk" = 7," " = 1))
data <- db %>%
group_by(fakultas, jenjang, prodi, jalur) %>%
filter(nim == "diterima") %>%
summarize(n =  n()) %>%
pivot_wider(names_from = jalur, values_from = n)
data
data[is.na(data)] <- 0
data
names(data)
data[,c(-1, 3, 2, 4:10)]
data[,c(-1, 3, 2, 4:9)]
data <- db %>%
group_by(fakultas, jenjang, prodi, jalur) %>%
filter(nim == "diterima") %>%
summarize(n =  n()) %>%
pivot_wider(names_from = jalur, values_from = n)
data[is.na(data)] <- 0
data[,c(-1, 3, 2, 4:9)]
data <- db %>%
group_by(fakultas, jenjang, prodi, jalur) %>%
filter(nim == "diterima") %>%
summarize(n =  n()) %>%
pivot_wider(names_from = jalur, values_from = n)
data[is.na(data)] <- 0
name(data)
names(data)
data[,-1]
names(data)
data <- db %>%
group_by(fakultas, jenjang, prodi, jalur) %>%
filter(nim == "diterima") %>%
summarize(n =  n()) %>%
pivot_wider(names_from = jalur, values_from = n)
data[is.na(data)] <- 0
data[,-1]
names(data)
data <- data[, c(-1, 3, 2, 4:10)]
data <- db %>%
group_by(fakultas, jenjang, prodi, jalur) %>%
filter(nim == "diterima") %>%
summarize(n =  n()) %>%
pivot_wider(names_from = jalur, values_from = n)
data[is.na(data)] <- 0
data <- data[, c(-1, 3, 2, 4:10)]
data <- db %>%
group_by(fakultas, jenjang, prodi, jalur) %>%
filter(nim == "diterima") %>%
summarize(n =  n()) %>%
pivot_wider(names_from = jalur, values_from = n)
data[is.na(data)] <- 0
data <- data[,-1]
names(data)
data <- data[, c(2, 1, 3:9)]
names(data)
data
names(data) <- c("Fakultas/Prodi", "Jenjang", "SNMPTN", "SBMPTN", "SMMPTN", "ADIK", "UMM D3", "Alih Jenjang", "UM Pasca")
data <- adorn_totals(data, where = c("row", "col") , name = c("Total", "Total"))
data
kable(data, row.names = F) %>%
kable_styling(bootstrap_options = "striped", full_width = F,
latex_options = "scale_down") %>%
add_header_above(c(" " = 2, "Jalur Masuk" = 8, " " = 1)) %>%
pack_rows("Hukum", 1, 1, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Keguruan dan Ilmu Pendidikan", 2, 20, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Teknik", 20, 26, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Pertanian", 27, 30, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Ekonomi dan Bisnis", 31, 38, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Ilmu Sosial dan Ilmu Politik", 39, 41, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Pascasarjana", 42, 54, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Kedokteran", 55, 59, label_row_css = "background-color: #666; color: #fff;")
names(data)
kable(data, row.names = F) %>%
kable_styling(bootstrap_options = "striped", full_width = F,
latex_options = "scale_down") %>%
add_header_above(c(" " = 2, "Jalur Masuk" = 7, " " = 1)) %>%
pack_rows("Hukum", 1, 1, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Keguruan dan Ilmu Pendidikan", 2, 20, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Teknik", 20, 26, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Pertanian", 27, 30, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Ekonomi dan Bisnis", 31, 38, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Ilmu Sosial dan Ilmu Politik", 39, 41, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Pascasarjana", 42, 54, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Kedokteran", 55, 59, label_row_css = "background-color: #666; color: #fff;")
View(data)
data1 <- db %>%
group_by(fakultas, jenjang, prodi, jalur) %>%
filter(jalur %in% c("1_SNMPTN", "2_SBMPTN", "3_SMMPTN"), !is.na(prodi)) %>%
summarize(peminat = max(peminat),
lulus = n(),
sudah = sum(na.omit(registrasi == "registrasi")),
belum = lulus - sudah,
diterima = sum(na.omit(nim == "diterima")))
data2 <- db %>%
group_by(fakultas, jenjang, prodi, jalur) %>%
filter(!jalur %in% c("1_SNMPTN", "2_SBMPTN", "3_SMMPTN"), !is.na(prodi)) %>%
summarize(peminat = max(peminat),
lulus = sum(na.omit(registrasi == "registrasi")),
sudah = sum(na.omit(registrasi == "registrasi")),
belum = lulus - sudah,
diterima = sum(na.omit(nim == "diterima")))
data <- rbind(data1, data2)
data <- data %>%
group_by(fakultas, jenjang, prodi) %>%
summarize(peminat = sum(peminat),
lulus = sum(lulus),
sudah = sum(sudah),
belum = sum(belum),
diterima = sum(diterima))
data <- data[, -1]
data$pers_sudah <- round(data$sudah / data$lulus * 100, 0)
data$pers_belum <- round(data$belum / data$lulus * 100, 0)
data <- data[,c(2, 1, 3:6, 8:9, 7)]
names(data)
names(data) <- c("Fakultas/Program Studi", "Jenjang","Peminat", "Lulus", "Ya", "Tidak", "Ya (%)", "Tidak (%)", "Bayar UKT")
data <- adorn_totals(data,where = "row", name = "Total")
kable(data, row.names = F) %>%
kable_styling(bootstrap_options = "striped", full_width = F,
latex_options = "scale_down") %>%
add_header_above(c(" " = 4, "Registrasi" = 4, " " = 1)) %>%
pack_rows("Hukum", 1, 1, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Keguruan dan Ilmu Pendidikan", 2, 20, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Teknik", 20, 26, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Pertanian", 27, 30, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Ekonomi dan Bisnis", 31, 38, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Ilmu Sosial dan Ilmu Politik", 39, 41, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Pascasarjana", 42, 54, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Kedokteran", 55, 59, label_row_css = "background-color: #666; color: #fff;")
setwd("G:/My Drive/#PMB/2021/Dashboard/21pmb")
>>>>>>> ebfb623a918edc1f766102f82113d8e17e703ab7
